---
import type { NameAndIcon } from "@/cv-types";
import { Icon } from "astro-icon/components";
import { createFilterID } from "@/skill-filter";

interface Props {
  items: NameAndIcon[] | string[];
  type: "languages" | "tools";
  input?: boolean;
  title?: string;
  groupBy?: string;
}

const { items, type, input = false, title, groupBy }: Props = Astro.props;

const idType = groupBy
  ? `${createFilterID("languages", groupBy)}-technologies`
  : type;

const namedItems = items.map((item) => {
  if (typeof item === "string") {
    return { name: item, icon: null };
  }
  return item;
});
---

{title && <h2 class="section-title2">{title}</h2>}
<ul class="flex flex-wrap gap-2">
  {
    groupBy && (
      <li class="flex items-center">
        <p class="font-semibold text-skin-hue">{groupBy + ":"}</p>
      </li>
    )
  }
  {
    namedItems.map(({ name, icon }) =>
      input ? (
        <li class="cursor-pointer">
          <input
            type="checkbox"
            id={createFilterID(idType, name)}
            value={name}
            class="input-skill-box hidden"
            checked
          />
          <label for={createFilterID(idType, name)} class="skill-box">
            {icon && <Icon name={icon} width={16} height={16} />}
            <span>{name}</span>
          </label>
        </li>
      ) : (
        <li
          class={`child-${createFilterID(idType, name)} child-skill-box skill-box`}
        >
          {icon && <Icon name={icon} width={16} height={16} />}
          <span>{name}</span>
        </li>
      ),
    )
  }
</ul>

<style>
  .input-skill-box:not(:checked) + label {
    background-color: transparent;
  }
</style>
