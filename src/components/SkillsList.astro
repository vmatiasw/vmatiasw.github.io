---
import type { NameAndIcon } from "@/cv-types";
import { Icon } from "astro-icon/components";
import { createFilterID } from "@/skill-filter";

interface Props {
  class?: string;
  items: NameAndIcon[] | string[];
  type: "languages" | "tools";
  input?: boolean;
  title?: string;
  groupBy?: string;
}

const { items, type, input = false, title, groupBy }: Props = Astro.props;

const idType = groupBy
  ? `${createFilterID("languages", groupBy)}-technologies`
  : type;

const namedItems = items.map((item) => {
  if (typeof item === "string") {
    return { name: item, icon: null };
  }
  return item;
});
---

<div class={`${Astro.props.class}`}>
  {title && <h2 class="section-title2 mb-2 print:mb-0">{title}</h2>}
  <ul class="flex flex-wrap gap-2 print:gap-y-0 print:text-sm">
    {
      groupBy && (
        <li class="flex items-center">
          <p class="font-semibold text-skin-accent">{groupBy + ":"}</p>
        </li>
      )
    }
    {
      namedItems.map(({ name, icon }) =>
        input ? (
          <li>
            <input
              type="checkbox"
              id={createFilterID(idType, name)}
              value={name}
              class="input-skill-box hidden"
              checked
            />
            <label for={createFilterID(idType, name)} class="skill-box cursor-pointer">
              {icon && <Icon name={icon} class="size-4 print:hidden" />}
              <span>{name}</span>
            </label>
          </li>
        ) : (
          <li
            class={`child-${createFilterID(idType, name)} child-skill-box skill-box`}
          >
            {icon && <Icon name={icon} class="size-4 print:hidden" />}
            <span>{name}</span>
          </li>
        ),
      )
    }
  </ul>
</div>

<style>
  @media not print {
    .skill-box {
      @apply flex p-1 gap-1 rounded-md border-4 border-skin-button/20 bg-skin-button/20 text-xs text-skin-button;
    }
  }
  .input-skill-box:not(:checked) + label {
    background-color: transparent;
  }
</style>
