---
import { CV } from "../../CVRepository";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import ThemeSwitch from "@/components/ThemeSwitch.astro";

const { name, label, image, location, profiles, email } = CV.basics;
const { city, region } = location;
---

<section class={Astro.props.className}>
  <div class="flex flex-col-reverse gap-8">
    <div class="flex flex-col gap-1">
      <h1 class="text-4xl font-bold">{name}</h1>
      <h2 class="text-skin-muted">{label}</h2>
      <div class="flex gap-2 pt-2 text-sm text-skin-muted">
        <Icon name="mdi:world" class="size-5" />
        {city}, {region}
      </div>
      <p>{email}</p>
      <div>
        {
          email && (
            <a
              class="button-hover-effect size-8"
              href={`mailto:${email}`}
              title={`Send email to me`}
              target="_blank"
              rel="noopener noreferrer"
            >
              <Icon name="mdi:email" class="size-5" />
            </a>
          )
        }
        {
          profiles.map(({ network, url, icon }) => {
            return (
              <a
                class="button-hover-effect size-8"
                href={url}
                title={`Visit ${name} profile on ${network}`}
                target="_blank"
                rel="noopener noreferrer"
              >
                <Icon name={icon} class="size-5" />
              </a>
            );
          })
        }
        <div class="button-hover-effect size-8">
          <Icon name="ri:command-fill" class="size-5" />
        </div>
        <ThemeSwitch class="button-hover-effect size-8" />
      </div>
    </div>
    <figure class="relative w-fit">
      <Image height={600} width={600} src={image} alt={name} />
      <div class="absolute -inset-2">
        <div class="gradient-y-mask right-0"></div>
        <div class="gradient-y-mask left-0"></div>
        <div class="gradient-x-mask bottom-0"></div>
        <div class="gradient-x-mask top-0"></div>
      </div>
    </figure>
  </div>
</section>

<style>
  .gradient-y-mask {
    @apply absolute -inset-y-8 w-px bg-skin-hue/50 [mask-image:linear-gradient(to_top,transparent,white_4rem,white_calc(100%-4rem),transparent)];
  }

  .gradient-x-mask {
    @apply absolute -inset-x-8 h-px bg-skin-hue/50 [mask-image:linear-gradient(to_left,transparent,white_4rem,white_calc(100%-4rem),transparent)];
  }

  img {
    @apply aspect-square w-32 rounded-2xl bg-cover;
  }
</style>

<script>
  const select = document.getElementById("themeSwitch") as HTMLSelectElement;
  const theme = localStorage.getItem("theme");
  const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches
    ? "dark"
    : "light";

  if (theme !== null) {
    select.value = theme;
  } else {
    select.value = systemTheme;
  }

  function updateTheme(value: string) {
    const theme = value === "system" ? systemTheme : value;
    document.documentElement.classList.remove("light", "dark");
    document.documentElement.classList.add(theme);
    localStorage.setItem("theme", value);
  }

  updateTheme(select.value);

  select.addEventListener("change", (event: Event) => {
    const select = event.target as HTMLSelectElement;
    updateTheme(select.value);
  });

  // Deshabilitar modo oscuro al imprimir
  window.addEventListener("beforeprint", () => {
    document.documentElement.classList.remove("dark");
  });

  // Restaurar el modo oscuro despuÃ©s de imprimir
  window.addEventListener("afterprint", () => {
    if (
      select.value === "dark" ||
      (select.value === "system" && systemTheme === "dark")
    ) {
      document.documentElement.classList.add("dark");
    }
  });
</script>
