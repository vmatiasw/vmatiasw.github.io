---
import AcordionSection from "../AcordionSection.astro";
import CV from "@cv";
import { Icon } from "astro-icon/components";
import { getclassId } from "../../classes-generator";

const { skills } = CV;
---

<AcordionSection className={Astro.props.className} title="Skills">
  <ul
    class="inline-flex flex-wrap gap-4 print:mt-4 [&>li>svg]:text-skin-hue [&>li]:text-sm"
  >
    {
      skills.languages?.map(({ name, icon }) => (
        <li>
          <input
            type="checkbox"
            id={getclassId("languages", name)}
            value={name}
            class="skill-checkbox hidden"
            checked
          />
          <label
            for={getclassId("languages", name)}
            class="flex cursor-pointer items-center gap-1 rounded-md border border-solid border-skin-hue/20 bg-skin-button-accent/20 px-1 py-0.5 text-xs text-skin-hue print:border-none print:bg-transparent print:p-0 print:text-zinc-800"
          >
            {icon && <Icon name={icon} width={16} height={16} />}
            <span>{name}</span>
          </label>
        </li>
      ))
    }
  </ul>
  <div class="mt-4 flex gap-4">
    <label>
      <input type="checkbox" id="skills-filter-checkbox" />
      <span class="button-hover-effect">Filter</span>
    </label>
    <button
      id="skills-check-all-btn"
      class="button-hover-effect"
      aria-label="Select all skills"
    >
      Select All
    </button>
    <button
      id="skills-uncheck-all-btn"
      class="button-hover-effect"
      aria-label="Deselect all skills"
    >
      Deselect All
    </button>
  </div>
</AcordionSection>

<script>
  import { SKILL_FILTER_CLASS } from "../../classes-generator";

  document.addEventListener("DOMContentLoaded", () => {
    const checkAllBtn = document.getElementById(
      "skills-check-all-btn",
    ) as HTMLButtonElement;
    const uncheckAllBtn = document.getElementById(
      "skills-uncheck-all-btn",
    ) as HTMLButtonElement;
    const filterCheckbox = document.getElementById(
      "skills-filter-checkbox",
    ) as HTMLInputElement;
    const checkboxes = [
      ...document.querySelectorAll(".skill-checkbox"),
    ] as HTMLInputElement[];
    const skillFilterElements = [
      ...document.querySelectorAll(`.${SKILL_FILTER_CLASS}`),
    ] as HTMLElement[];

    const toggleCheckboxes = (checked: boolean) => {
      checkboxes.forEach((checkbox) => (checkbox.checked = checked));
      filterCheckbox.dispatchEvent(new Event("change"));
    };
    checkAllBtn.addEventListener("click", () => toggleCheckboxes(true));
    uncheckAllBtn.addEventListener("click", () => toggleCheckboxes(false));

    checkboxes.forEach((checkbox) => {
      checkbox.addEventListener("change", () => {
        filterCheckbox.dispatchEvent(new Event("change"));
      });
    });

    filterCheckbox.addEventListener("change", () => {
      const displayStyle = filterCheckbox.checked ? "none" : "block";
      skillFilterElements.forEach(
        (element) => (element.style.display = displayStyle),
      );

      if (filterCheckbox.checked) {
        checkboxes
          .filter((checkbox) => checkbox.checked)
          .map((checkbox) => checkbox.id)
          .forEach((skill: string) => {
            [...document.getElementsByClassName(skill)].forEach(
              (element) => ((element as HTMLElement).style.display = "block"),
            );
          });
      }
    });
  });
</script>

<style>
  .skill-checkbox:not(:checked) + label {
    background-color: transparent;
  }
</style>
