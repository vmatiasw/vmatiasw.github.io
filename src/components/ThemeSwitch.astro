---
import { Icon } from "astro-icon/components";
---

<button
  id="themeSwitch"
  class=`${Astro.props.class} group/theme`
  title="Change theme"
>
  <i class="transition-transform group-hover/theme:rotate-45">
    <Icon name="ri:moon-fill" class="hidden size-5 dark:block" />
    <Icon name="ri:sun-fill" class="size-5 dark:hidden" />
  </i>
</button>

<style>
  :global(.dark) {
    color-scheme: dark;
  }
</style>

<script>
  let isDark = document.documentElement.classList.contains("dark");

  function toggleDark(event: MouseEvent) {
    const isAppearanceTransition =
      "startViewTransition" in document &&
      !window.matchMedia("(prefers-reduced-motion: reduce)").matches;

    if (!isAppearanceTransition) {
      isDark = !isDark;
      updateTheme();
      return;
    }

    const x = event.clientX;
    const y = event.clientY;
    const endRadius = Math.hypot(
      Math.max(x, innerWidth - x),
      Math.max(y, innerHeight - y),
    );

    // @ts-ignore
    const transition = document.startViewTransition(async () => {
      isDark = !isDark;
      updateTheme();
    });

    transition.ready.then(() => {
      const clipPath = [
        `circle(0px at ${x}px ${y}px)`,
        `circle(${endRadius}px at ${x}px ${y}px)`,
      ];
      document.documentElement.animate(
        {
          clipPath: isDark ? [...clipPath].reverse() : clipPath,
        },
        {
          duration: 400,
          easing: "ease-out",
          pseudoElement: isDark
            ? "::view-transition-old(root)"
            : "::view-transition-new(root)",
        },
      );
    });
  }

  function updateTheme() {
    document.documentElement.classList.toggle("dark", isDark);
    localStorage.setItem("theme", isDark ? "dark" : "light");
  }

  function updateDataTheme(value: string) {
    document.body.setAttribute("data-theme", value);
    localStorage.setItem("data-theme", value);
  }

  const themeSwitchButton = document.getElementById("themeSwitch");
  if (themeSwitchButton) {
    themeSwitchButton.addEventListener("click", toggleDark);
  }

  const themeSelect = document.getElementById(
    "themeSelect",
  ) as HTMLSelectElement;

  if (themeSelect) {
    themeSelect.addEventListener("change", (e) => {
      const selectedTheme = (e.target as HTMLSelectElement).value;
      updateDataTheme(selectedTheme);
    });
  }

  // Initialize theme based on user preference or system setting
  if (
    localStorage.theme === "dark" ||
    (!("theme" in localStorage) &&
      window.matchMedia("(prefers-color-scheme: dark)").matches)
  ) {
    isDark = true;
    updateTheme();
  }

  // Initialize data-theme based on stored value or default
  const storedDataTheme =
    localStorage.getItem("data-theme") ||
    document.body.getAttribute("data-theme")!;

  updateDataTheme(storedDataTheme);

  if (themeSelect) {
    themeSelect.value = storedDataTheme;
  }

  // Listen for changes in system color scheme
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (e) => {
      if (!("theme" in localStorage)) {
        isDark = e.matches;
        updateTheme();
      }
    });
</script>
