---
import type { NamedEntity, SkillSet } from "@/CVMapper";
import SkillsList from "@/components/base/SkillsList.astro";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";

export interface Props {
  class?: string;
  firstTitle?: string;
  entityTitle?: string;
  entityUrl?: string;
  headerIcons?: { url: string; icon: string; name: string }[] | undefined;
  subtitle?: string;
  summary: string;
  body: Record<string, string[]> | undefined;
  details?: Record<string, string[]> | undefined;
  image?: string;
  skills: SkillSet;
}

const {
  firstTitle,
  entityTitle,
  entityUrl,
  headerIcons,
  subtitle,
  summary,
  details,
  image,
  body,
  skills,
}: Props = Astro.props;
---

<div class={Astro.props.class}>
  <div class={headerIcons && "flex items-center gap-2 justify-between"}>
    <h4 class="flex-inline">
      {firstTitle && <span>{firstTitle}</span>}
      {firstTitle && entityTitle && <span class="text-skin-primary"> @ </span>}
      {
        entityTitle &&
          (entityUrl ? (
            <a
              href={entityUrl}
              class="btn-text group gap-3"
              target="_blank"
              rel="noopener noreferrer"
              title={`Visit ${entityTitle}`}
              aria-label={`Visit ${entityTitle}`}
            >
              {entityTitle}
              <Icon
                name="ri:arrow-up-line"
                class="inline size-6 rotate-45 group-hover:-translate-y-0.5 group-hover:translate-x-0.5 cv:hidden"
              />
            </a>
          ) : (
            <span>{entityTitle}</span>
          ))
      }
    </h4>
    {
      headerIcons &&
        headerIcons.map(({ url, icon, name }) => (
          <a
            href={url}
            title={`View in ${name}`}
            aria-label={`View in ${name}`}
            target="_blank"
            rel="noopener"
            class="btn-icon"
          >
            <Icon name={icon} class="size-6 cv:hidden" />
          </a>
        ))
    }
  </div>
  {subtitle && <h6 class="text-skin-secondary">{subtitle}</h6>}
  <div class="my-4 space-y-4">
    <p class="text-skin-primary" set:html={summary} />
    {
      body &&
        Object.entries(body).map(([key, value]) => (
          <div>
            <h5>{key}</h5>
            <ul class="flex list-disc flex-col gap-2 text-skin-primary">
              {value.map((item) => (
                <li class="ml-4 marker:text-skin-accent">
                  <p set:html={item} />
                </li>
              ))}
            </ul>
          </div>
        ))
    }
    {
      details && (
        <details class="group mt-4 space-y-4 cv:hidden">
          <summary class="btn-text flex gap-1.5 text-xs">
            <Icon
              name="ri:arrow-up-s-line"
              class="size-4 duration-200 group-open:rotate-180"
            />
            <span class="group-open:hidden">Show more</span>
            <span class="hidden group-open:block">Show less</span>
          </summary>
          {details &&
            Object.entries(details).map(([key, value]) => (
              <div>
                <h5 aria-label={`Details for ${key}`}>{key}:</h5>
                <ul class="flex list-disc flex-col gap-2 text-skin-primary">
                  {value.map((item) => (
                    <li class="ml-4 marker:text-skin-accent">
                      <p set:html={item} />
                    </li>
                  ))}
                </ul>
              </div>
            ))}
        </details>
      )
    }
  </div>
  {
    image && (
      <a data-src={image}>
        <Image
          src={image}
          alt=""
          width={800}
          height={1080}
          class="mt-3 max-w-full rounded-lg"
        />
      </a>
    )
  }
</div>
{
  Object.keys(skills).length > 0 && (
    <div class="cv:hidden">
      <SkillsList
        summarize={true}
        items={
          [
            ...(skills.tools || []),
            ...(skills.databases || []),
            ...(skills.languages || []),
            ...new Set(
              skills.languages?.flatMap((lang) => lang.technologies) || [],
            ),
          ].filter(Boolean) as NamedEntity[] // This is necessary to filter out invalid values caused by a bug in getFilteredObject in data-helpers.
        }
      />
    </div>
  )
}
