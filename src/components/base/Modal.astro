---
import { Icon } from "astro-icon/components";

interface Button {
  ariaLabel: string;
  text: string;
  icon?: string;
  id: string;
  buttonClass?: string;
}

interface Props {
  title: string;
  modalId: string;
  buttons?: Button[];
  closePrimary?: boolean;
}

const {
  title,
  modalId,
  closePrimary,
  buttons: propsButtons = [],
}: Props = Astro.props;

const buttons = closePrimary
  ? [
      ...propsButtons,
      {
        ariaLabel: "Close modal",
        text: "Close",
        id: `close-modal:${modalId}`,
        buttonClass: "btn-primary",
      },
    ]
  : propsButtons;
---

<div
  id={modalId}
  role="dialog"
  aria-modal="true"
  tabindex="-1"
  class="modal fixed inset-0 z-50 flex hidden items-center justify-center bg-skin-muted/30"
>
  <div class="max-w-md rounded-lg bg-skin-secondary [&>*]:p-4 [&>*]:md:p-5">
    <div class="flex justify-between border-b border-skin-muted">
      <h3>
        {title}
      </h3>
      {
        !closePrimary && (
          <button
            class="btn-icon"
            id={`close-modal:${modalId}`}
            title="Close modal"
            aria-label="Close modal"
          >
            <Icon name="mdi:close" class="size-6" />
          </button>
        )
      }
    </div>
    <div>
      <slot />
    </div>
    <div
      class="flex items-center justify-center gap-3 border-t border-skin-muted"
    >
      {
        buttons.map(({ ariaLabel, text, icon, id, buttonClass }) => (
          <button
            id={id}
            title={ariaLabel}
            aria-label={ariaLabel}
            class={buttonClass || "btn-secondary"}
          >
            {icon && <Icon name={icon} class="size-5" />}
            {text}
          </button>
        ))
      }
    </div>
  </div>
</div>

<script>
  function openModal(modal: HTMLElement) {
    modal.classList.remove("hidden");
  }
  function closeModal(modal: HTMLElement) {
    modal.classList.add("hidden");
  }

  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".modal").forEach((value) => {
      const modal = value as HTMLElement;
      const openBtn = document.getElementById(`open-modal:${modal.id}`);
      const closeBtn = document.getElementById(`close-modal:${modal.id}`);

      openBtn?.addEventListener("click", () => openModal(modal));
      closeBtn?.addEventListener("click", () => closeModal(modal));
      modal.addEventListener("click", (event: MouseEvent) => {
        if (event.target === modal) closeModal(modal);
      });
      window.addEventListener("keydown", (event: KeyboardEvent) => {
        if (event.key === "Escape" && !modal.classList.contains("hidden"))
          closeModal(modal);
      });
    });
  });
</script>
