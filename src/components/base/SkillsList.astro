---
import type { NamedEntity } from "@/CVMapper";
import { Icon } from "astro-icon/components";
import { createIDFromText } from "@/data-helpers";

interface Props {
  class?: string;
  items: NamedEntity[] | string[];
  input?: boolean;
  groupBy?: string;
}

const { items, input = false, groupBy }: Props = Astro.props;

const namedItems = items.map((item) => {
  if (typeof item === "string") {
    return { name: item, icon: null };
  }
  return { name: item.name, icon: item.icon };
});
---

<ul class={`flex flex-wrap gap-2 cv:gap-y-1 items-center ${Astro.props.class}`}>
  {
    groupBy && (
      <li>
        <h6 class="text-skin-secondary">{groupBy + ":"}</h6>
      </li>
    )
  }
  {
    namedItems.map(({ name, icon }) =>
      input ? (
        <li>
          <input
            type="checkbox"
            id={createIDFromText(name)}
            value={name}
            class="input-skill-box hidden"
          />
          <label
            for={createIDFromText(name)}
            class="not-cv:interactive-skill-box"
          >
            {icon && <Icon name={icon} class="size-4 cv:hidden" />}
            <p>{name}</p>
          </label>
        </li>
      ) : (
        <li
          class={`${createIDFromText(name, "child-", undefined, "dynamic-child")} not-cv:skill-box`}
          data-selected="false"
        >
          {icon && <Icon name={icon} class="size-4 cv:hidden" />}
          <p class="text-xs">{name}</p>
        </li>
      ),
    )
  }
</ul>

<style>
  .input-skill-box:checked + label {
    @apply border-skin-bg-primary bg-skin-interactive text-skin-contrast;
  }
  .dynamic-child[data-selected="true"] {
    @apply border-skin-bg-primary bg-skin-accent text-skin-contrast;
  }
</style>
