---
import type { NamedEntity } from "@/CVMapper";
import { Icon } from "astro-icon/components";

interface Props {
  class?: string;
  items: NamedEntity[] | string[];
  groupBy?: string;
  summarize?: boolean;
}

const { items, groupBy, summarize = false }: Props = Astro.props;

const MAX_ITEMS = 10;

const namedItems = items.map((item) => {
  if (typeof item === "string") {
    return { name: item, icon: null };
  }
  return { name: item.name, icon: item.icon };
});

const showMoreButton = summarize && namedItems.length - 1 > MAX_ITEMS;
---

<ul class={`flex flex-wrap gap-2 cv:gap-y-1 items-center ${Astro.props.class}`}>
  {
    groupBy && (
      <li>
        <h6 class="text-skin-secondary">{groupBy + ":"}</h6>
      </li>
    )
  }
  {
    namedItems.map(({ name, icon }, index) => (
      <li
      class={`${index > MAX_ITEMS ? "item-overflow hidden" : "not-cv:skill-box"}`}}
      >
        {icon && <Icon name={icon} class="size-4 cv:hidden" />}
        <p class="not-cv:text-xs">{name}</p>
      </li>
    ))
  }
  {
    showMoreButton && (
      <li>
        <button class="btn-icon text-2xl below-sm:text-1xl" id="toggle-list-overflow">
          {"... <"}
        </button>
      </li>
    )
  }
</ul>

<script>
  function toggleOverflow() {
    document.querySelectorAll(".item-overflow").forEach((el) => {
      el.classList.toggle("hidden");
      el.classList.toggle("not-cv:skill-box");
    });
    
    const btn = document.getElementById("toggle-list-overflow");
    if (btn)
      btn.textContent = btn.textContent === ">" ? "... <" : ">";
    }

  document
    .getElementById("toggle-list-overflow")
    ?.addEventListener("click", toggleOverflow);
</script>
