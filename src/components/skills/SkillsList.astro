---
import type { NamedEntity } from "@/CVMapper";
import { Icon } from "astro-icon/components";
import { createID } from "@/data-helpers";

interface Props {
  class?: string;
  items: NamedEntity[] | string[];
  input?: boolean;
  groupBy?: string;
}

const { items, input = false, groupBy }: Props = Astro.props;

const namedItems = items.map((item) => {
  if (typeof item === "string") {
    return { name: item, icon: null };
  }
  return { name: item.name, icon: item.icon };
});
---

<ul
  class={`flex flex-wrap gap-2 print:gap-y-0 items-center ${Astro.props.class}`}
>
  {groupBy && <h6 class="text-skin-secondary">{groupBy + ":"}</h6>}
  {
    namedItems.map(({ name, icon }) =>
      input ? (
        <li>
          <input
            type="checkbox"
            id={createID(name)}
            value={name}
            class="input-skill-box hidden"
          />
          <label for={createID(name)} class="interactive-skill-box">
            {icon && <Icon name={icon} class="size-4 print:hidden" />}
            <p>{name}</p>
          </label>
        </li>
      ) : (
        <li
          class={`child-${createID(name)} dynamic-child skill-box`}
          data-checked="false"
        >
          {icon && <Icon name={icon} class="size-4 print:hidden" />}
          <p class="text-xs">{name}</p>
        </li>
      ),
    )
  }
</ul>

<style>
  @media not print {
    .skill-box {
      @apply flex gap-1 rounded-md border-2 border-skin-accent/30 p-1 text-xs text-skin-accent;
    }
    .interactive-skill-box {
      @apply flex cursor-pointer gap-1 rounded-md border-2 border-skin-interactive/60 p-1 text-xs text-skin-interactive;
    }
  }
  .input-skill-box:checked + label {
    @apply border-skin-bg-primary bg-skin-interactive text-skin-contrast;
  }
  .dynamic-child[data-checked="true"] {
    @apply border-skin-bg-primary bg-skin-accent text-skin-contrast;
  }
</style>
