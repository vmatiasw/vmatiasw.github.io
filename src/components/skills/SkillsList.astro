---
import type { NameAndIcon } from "@/cv-types";
import { Icon } from "astro-icon/components";

interface Props {
  class?: string;
  items: NameAndIcon[] | string[];
  type: "languages" | "tools";
  input?: boolean;
  title?: string;
  groupBy?: string;
}

const { items, type, input = false, title, groupBy }: Props = Astro.props;

function createFilterID(type: string, name: string): string {
  return `${type}:${name.replace(/\s+/g, "-")}`.toLowerCase();
}

const idType = groupBy
  ? `${createFilterID("languages", groupBy)}-technologies`
  : type;

const namedItems = items.map((item) => {
  if (typeof item === "string") {
    return { name: item, icon: null };
  }
  return item;
});
---

<div class={`${Astro.props.class} space-y-2 print:space-y-0`}>
  {title && <h4>{title}</h4>}
  <ul class="flex flex-wrap gap-2 print:gap-y-0">
    {
      groupBy && (
        <li class="flex items-center">
          <h6 class="text-skin-secondary">{groupBy + ":"}</h6>
        </li>
      )
    }
    {
      namedItems.map(({ name, icon }) =>
        input ? (
          <li>
            <input
              type="checkbox"
              id={createFilterID(idType, name)}
              value={name}
              class="input-skill-box hidden"
            />
            <label
              for={createFilterID(idType, name)}
              class="interactive-skill-box"
            >
              {icon && <Icon name={icon} class="size-4 print:hidden" />}
              <span>
                <p>{name}</p>
              </span>
            </label>
          </li>
        ) : (
          <li
            class={`child-${createFilterID(idType, name)} child-skill-box skill-box`}
            data-checked="false"
          >
            {icon && <Icon name={icon} class="size-4 print:hidden" />}
            <span>
              <p class="text-xs">{name}</p>
            </span>
          </li>
        ),
      )
    }
  </ul>
</div>

<style>
  @media not print {
    .skill-box {
      @apply flex gap-1 rounded-md border-2 border-skin-accent/30 p-1 text-xs text-skin-accent;
    }
    .interactive-skill-box {
      @apply flex cursor-pointer gap-1 rounded-md border-2 border-skin-interactive/60 p-1 text-xs text-skin-interactive;
    }
  }
  .input-skill-box:checked + label {
    @apply border-skin-bg-primary bg-skin-interactive text-skin-contrast;
  }
  .child-skill-box[data-checked="true"] {
    @apply border-skin-bg-primary bg-skin-accent text-skin-contrast;
  }
</style>
